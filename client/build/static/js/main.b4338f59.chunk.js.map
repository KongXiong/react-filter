{"version":3,"sources":["components/Item.js","components/SearchBar.js","components/Container.js","App.js","serviceWorker.js","index.js"],"names":["Item","props","react_default","a","createElement","key","item","SearchBar","className","type","onKeyUp","handleSearch","initialItems","Container","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","items","bind","assertThisInitialized","event","preventDefault","updatedList","filter","toLowerCase","search","target","value","setState","components_SearchBar","map","components_Item","Component","App","components_Container","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wOAOeA,EALF,SAACC,GAAD,OACZC,EAAAC,EAAAC,cAAA,OAAKC,IAAKJ,EAAMK,MACdL,EAAMK,OCIMC,EANG,SAACN,GAAD,OACjBC,EAAAC,EAAAC,cAAA,OAAKI,UAAU,aACdN,EAAAC,EAAAC,cAAA,uBACCF,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OAAOC,QAAST,EAAMU,iBCD/BC,EAAe,CACL,SACA,WACA,UACA,QACA,OACA,SACA,UACA,UACA,OACA,OACA,UAuCDC,cAnCd,SAAAA,EAAYZ,GAAO,IAAAa,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IAClBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMhB,KAEDoB,MAAM,CACVC,MAAOV,GAERE,EAAKH,aAAeG,EAAKH,aAAaY,KAAlBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KANFA,4EASNW,GACZA,EAAMC,iBACN,IAEOC,EAFOf,EAEagB,OAAQ,SAACtB,GAAD,OACiC,IAAjEA,EAAKuB,cAAcC,OAAOL,EAAMM,OAAOC,MAAMH,iBAE/CZ,KAAKgB,SAAS,CAACX,MAAOK,qCAIvB,OACCzB,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAC8B,EAAD,CAAWvB,aAAcM,KAAKN,eAC9BT,EAAAC,EAAAC,cAAA,WAEEa,KAAKI,MAAMC,MAAMa,IAAK,SAAC7B,GAAD,OACrBJ,EAAAC,EAAAC,cAACgC,EAAD,CAAM9B,KAAMA,eA3BK+B,aCJTC,mLARX,OACEpC,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACbN,EAAAC,EAAAC,cAACmC,EAAD,cAJUF,aCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b4338f59.chunk.js","sourcesContent":["import React from 'react';\n\nconst Item = (props) =>\n\t<div key={props.item}>\n\t\t{props.item}\n\t</div>;\n\nexport default Item;","import React from 'react';\n\nconst SearchBar = (props) =>\n\t<div className='container'>\n\t\t<label>Search</label>\n\t  <input type=\"text\" onKeyUp={props.handleSearch}/>\n\t</div>;\n\nexport default SearchBar;","import React, { Component } from 'react';\nimport Item from './Item';\nimport SearchBar from './SearchBar';\n\nconst initialItems = [\n\t\t\t\t\t\t\t         \"Apples\",\n\t\t\t\t\t\t\t         \"Broccoli\",\n\t\t\t\t\t\t\t         \"Chicken\",\n\t\t\t\t\t\t\t         \"Bacon\",\n\t\t\t\t\t\t\t         \"Eggs\",\n\t\t\t\t\t\t\t         \"Salmon\",\n\t\t\t\t\t\t\t         \"Granola\",\n\t\t\t\t\t\t\t         \"Bananas\",\n\t\t\t\t\t\t\t         \"Beer\",\n\t\t\t\t\t\t\t         \"Wine\",\n\t\t\t\t\t\t\t         \"Yogurt\"\n\t\t\t\t\t\t\t       ];\n\nclass Container extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state={ \n\t\t\titems: initialItems\n\t\t};\n\t\tthis.handleSearch = this.handleSearch.bind(this);\n\t}\n\n\thandleSearch(event) {\n\t\tevent.preventDefault();\n\t\tconst items = initialItems\n\n\t  const updatedList = items.filter( (item) =>\n\t    item.toLowerCase().search(event.target.value.toLowerCase()) !== -1\n\t  );\n\t  this.setState({items: updatedList});\n\t}\n\t\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<SearchBar handleSearch={this.handleSearch} />\n\t\t\t\t<div>\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.state.items.map( (item) => \n\t\t\t\t\t\t\t<Item item={item}/>\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Container;","import React, { Component } from 'react';\nimport './App.css';\nimport Container from './components/Container';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Container />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}